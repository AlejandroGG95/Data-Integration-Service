import { clientInstanceI } from '../models/clients.schema';
import { usersInstanceI } from '../../../users/users.schema';
import { FrecuenciaInstanceI } from '../models/frecuencia.schema';
import { LoginInstanceI } from '../models/login.schema';
import { JobsI } from '../models/jobs.interfaces';
import { Model } from 'mongoose';
import { SchedulerRegistry } from '@nestjs/schedule';
export declare class DiService {
    private schedulelerRegistry;
    private clientModel;
    private usersModel;
    private frequencyModel;
    private loginModel;
    private readonly logger;
    constructor(schedulelerRegistry: SchedulerRegistry, clientModel: Model<clientInstanceI>, usersModel: Model<usersInstanceI>, frequencyModel: Model<FrecuenciaInstanceI>, loginModel: Model<LoginInstanceI>);
    path_ktr_trabaja: string;
    path_ktr_client: string;
    mongoprueba(): Promise<usersInstanceI[]>;
    mongoclient(): Promise<clientInstanceI[]>;
    findAll(orderByDate?: boolean): Promise<FrecuenciaInstanceI[]>;
    findRecord(id: string): Promise<FrecuenciaInstanceI>;
    modifyRecord(name_job: string, frecuencia: FrecuenciaInstanceI): Promise<FrecuenciaInstanceI>;
    listOneJobTemplate(job: string): Promise<any>;
    listAllJobTemplate(): Promise<any[]>;
    listAllJobClient(data: any): Promise<JobsI[]>;
    listJobsAndKtr(data: any): Promise<any>;
    getMongooseResouces(data: any): Promise<FrecuenciaInstanceI[]>;
    listVariableJob(data: any): Promise<any>;
    updateJob(data: any): Promise<void>;
    copiFolderContent(data_folder: any): any;
    createFrecuency(data_frecuency: any): Promise<FrecuenciaInstanceI>;
    updateFrecuency(data_frecuency: any): Promise<FrecuenciaInstanceI>;
    deleteJob(data: any): void;
    searchLogDB(data: any): Promise<any>;
    findAllLogs(): Promise<any>;
    findAllHistory(log_data: any): Promise<any>;
    launchJob(client: string, job: string): void;
    pruebajob(): string;
    actionSpecificCron(interface_select: any, action: any): Promise<"stop" | "start">;
    registrarse(user_data: any): Promise<LoginInstanceI>;
    login(user_data: any): Promise<any>;
}
